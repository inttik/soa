// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"
	"io"
	"net/url"
	"time"

	"github.com/google/uuid"
)

func (s *ErrorMessageStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerHttpAuthentication struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerHttpAuthentication) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerHttpAuthentication) SetToken(val string) {
	s.Token = val
}

type BirthString time.Time

// Ref: #/components/schemas/createUserRequest
type CreateUserRequest struct {
	Login    LoginString    `json:"login"`
	Password PasswordString `json:"password"`
	Email    EmailString    `json:"email"`
	Root     OptRootFlag    `json:"root"`
}

// GetLogin returns the value of Login.
func (s *CreateUserRequest) GetLogin() LoginString {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *CreateUserRequest) GetPassword() PasswordString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *CreateUserRequest) GetEmail() EmailString {
	return s.Email
}

// GetRoot returns the value of Root.
func (s *CreateUserRequest) GetRoot() OptRootFlag {
	return s.Root
}

// SetLogin sets the value of Login.
func (s *CreateUserRequest) SetLogin(val LoginString) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *CreateUserRequest) SetPassword(val PasswordString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *CreateUserRequest) SetEmail(val EmailString) {
	s.Email = val
}

// SetRoot sets the value of Root.
func (s *CreateUserRequest) SetRoot(val OptRootFlag) {
	s.Root = val
}

type DateString time.Time

type EmailString string

type ErrorMessage string

// ErrorMessageStatusCode wraps ErrorMessage with StatusCode.
type ErrorMessageStatusCode struct {
	StatusCode int
	Response   ErrorMessage
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorMessageStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorMessageStatusCode) GetResponse() ErrorMessage {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorMessageStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorMessageStatusCode) SetResponse(val ErrorMessage) {
	s.Response = val
}

type FriendAliasString string

type FriendHiddenFlag bool

type FriendList []FriendObject

func (*FriendList) friendsUserIDGetRes() {}

// Ref: #/components/schemas/friendModify
type FriendModify struct {
	FriendID  UserId                  `json:"friend_id"`
	Alias     OptFriendAliasString    `json:"alias"`
	Subscibed OptFriendSubscribedFlag `json:"subscibed"`
	Hidden    OptFriendHiddenFlag     `json:"hidden"`
	// If true, remove friend.
	Delete OptBool `json:"delete"`
}

// GetFriendID returns the value of FriendID.
func (s *FriendModify) GetFriendID() UserId {
	return s.FriendID
}

// GetAlias returns the value of Alias.
func (s *FriendModify) GetAlias() OptFriendAliasString {
	return s.Alias
}

// GetSubscibed returns the value of Subscibed.
func (s *FriendModify) GetSubscibed() OptFriendSubscribedFlag {
	return s.Subscibed
}

// GetHidden returns the value of Hidden.
func (s *FriendModify) GetHidden() OptFriendHiddenFlag {
	return s.Hidden
}

// GetDelete returns the value of Delete.
func (s *FriendModify) GetDelete() OptBool {
	return s.Delete
}

// SetFriendID sets the value of FriendID.
func (s *FriendModify) SetFriendID(val UserId) {
	s.FriendID = val
}

// SetAlias sets the value of Alias.
func (s *FriendModify) SetAlias(val OptFriendAliasString) {
	s.Alias = val
}

// SetSubscibed sets the value of Subscibed.
func (s *FriendModify) SetSubscibed(val OptFriendSubscribedFlag) {
	s.Subscibed = val
}

// SetHidden sets the value of Hidden.
func (s *FriendModify) SetHidden(val OptFriendHiddenFlag) {
	s.Hidden = val
}

// SetDelete sets the value of Delete.
func (s *FriendModify) SetDelete(val OptBool) {
	s.Delete = val
}

// Ref: #/components/schemas/friendObject
type FriendObject struct {
	FriendID   UserId                  `json:"friend_id"`
	Alias      OptFriendAliasString    `json:"alias"`
	Subscibed  OptFriendSubscribedFlag `json:"subscibed"`
	Hidden     OptFriendHiddenFlag     `json:"hidden"`
	Paired     OptFriendPairedFlag     `json:"paired"`
	FriendedAt OptDateString           `json:"friendedAt"`
	LastModify OptDateString           `json:"lastModify"`
}

// GetFriendID returns the value of FriendID.
func (s *FriendObject) GetFriendID() UserId {
	return s.FriendID
}

// GetAlias returns the value of Alias.
func (s *FriendObject) GetAlias() OptFriendAliasString {
	return s.Alias
}

// GetSubscibed returns the value of Subscibed.
func (s *FriendObject) GetSubscibed() OptFriendSubscribedFlag {
	return s.Subscibed
}

// GetHidden returns the value of Hidden.
func (s *FriendObject) GetHidden() OptFriendHiddenFlag {
	return s.Hidden
}

// GetPaired returns the value of Paired.
func (s *FriendObject) GetPaired() OptFriendPairedFlag {
	return s.Paired
}

// GetFriendedAt returns the value of FriendedAt.
func (s *FriendObject) GetFriendedAt() OptDateString {
	return s.FriendedAt
}

// GetLastModify returns the value of LastModify.
func (s *FriendObject) GetLastModify() OptDateString {
	return s.LastModify
}

// SetFriendID sets the value of FriendID.
func (s *FriendObject) SetFriendID(val UserId) {
	s.FriendID = val
}

// SetAlias sets the value of Alias.
func (s *FriendObject) SetAlias(val OptFriendAliasString) {
	s.Alias = val
}

// SetSubscibed sets the value of Subscibed.
func (s *FriendObject) SetSubscibed(val OptFriendSubscribedFlag) {
	s.Subscibed = val
}

// SetHidden sets the value of Hidden.
func (s *FriendObject) SetHidden(val OptFriendHiddenFlag) {
	s.Hidden = val
}

// SetPaired sets the value of Paired.
func (s *FriendObject) SetPaired(val OptFriendPairedFlag) {
	s.Paired = val
}

// SetFriendedAt sets the value of FriendedAt.
func (s *FriendObject) SetFriendedAt(val OptDateString) {
	s.FriendedAt = val
}

// SetLastModify sets the value of LastModify.
func (s *FriendObject) SetLastModify(val OptDateString) {
	s.LastModify = val
}

type FriendPairedFlag bool

type FriendSubscribedFlag bool

// FriendsUserIDGetBadRequest is response for FriendsUserIDGet operation.
type FriendsUserIDGetBadRequest struct{}

func (*FriendsUserIDGetBadRequest) friendsUserIDGetRes() {}

// FriendsUserIDGetForbidden is response for FriendsUserIDGet operation.
type FriendsUserIDGetForbidden struct{}

func (*FriendsUserIDGetForbidden) friendsUserIDGetRes() {}

// FriendsUserIDGetNotFound is response for FriendsUserIDGet operation.
type FriendsUserIDGetNotFound struct{}

func (*FriendsUserIDGetNotFound) friendsUserIDGetRes() {}

// FriendsUserIDGetServiceUnavailable is response for FriendsUserIDGet operation.
type FriendsUserIDGetServiceUnavailable struct{}

func (*FriendsUserIDGetServiceUnavailable) friendsUserIDGetRes() {}

// FriendsUserIDPostBadRequest is response for FriendsUserIDPost operation.
type FriendsUserIDPostBadRequest struct{}

func (*FriendsUserIDPostBadRequest) friendsUserIDPostRes() {}

// FriendsUserIDPostForbidden is response for FriendsUserIDPost operation.
type FriendsUserIDPostForbidden struct{}

func (*FriendsUserIDPostForbidden) friendsUserIDPostRes() {}

// A text message describing error.
// Ref: #/components/schemas/errorMessage
type FriendsUserIDPostNotFound struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FriendsUserIDPostNotFound) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*FriendsUserIDPostNotFound) friendsUserIDPostRes() {}

// If add/modify request, contains current information.
// If delete request,  contains nothing.
type FriendsUserIDPostOK struct {
	Friend OptFriendObject `json:"friend"`
}

// GetFriend returns the value of Friend.
func (s *FriendsUserIDPostOK) GetFriend() OptFriendObject {
	return s.Friend
}

// SetFriend sets the value of Friend.
func (s *FriendsUserIDPostOK) SetFriend(val OptFriendObject) {
	s.Friend = val
}

func (*FriendsUserIDPostOK) friendsUserIDPostRes() {}

// FriendsUserIDPostServiceUnavailable is response for FriendsUserIDPost operation.
type FriendsUserIDPostServiceUnavailable struct{}

func (*FriendsUserIDPostServiceUnavailable) friendsUserIDPostRes() {}

// FriendsUserIDPostUnauthorized is response for FriendsUserIDPost operation.
type FriendsUserIDPostUnauthorized struct{}

func (*FriendsUserIDPostUnauthorized) friendsUserIDPostRes() {}

type JwtToken []byte

type LinkString url.URL

// LoginPostBadRequest is response for LoginPost operation.
type LoginPostBadRequest struct{}

func (*LoginPostBadRequest) loginPostRes() {}

// LoginPostNotFound is response for LoginPost operation.
type LoginPostNotFound struct{}

func (*LoginPostNotFound) loginPostRes() {}

type LoginPostOK struct {
	Token  JwtToken `json:"token"`
	UserID UserId   `json:"user_id"`
}

// GetToken returns the value of Token.
func (s *LoginPostOK) GetToken() JwtToken {
	return s.Token
}

// GetUserID returns the value of UserID.
func (s *LoginPostOK) GetUserID() UserId {
	return s.UserID
}

// SetToken sets the value of Token.
func (s *LoginPostOK) SetToken(val JwtToken) {
	s.Token = val
}

// SetUserID sets the value of UserID.
func (s *LoginPostOK) SetUserID(val UserId) {
	s.UserID = val
}

// LoginPostOKHeaders wraps LoginPostOK with response headers.
type LoginPostOKHeaders struct {
	SetCookie OptLoginPostOKSetCookie
	Response  LoginPostOK
}

// GetSetCookie returns the value of SetCookie.
func (s *LoginPostOKHeaders) GetSetCookie() OptLoginPostOKSetCookie {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *LoginPostOKHeaders) GetResponse() LoginPostOK {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *LoginPostOKHeaders) SetSetCookie(val OptLoginPostOKSetCookie) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *LoginPostOKHeaders) SetResponse(val LoginPostOK) {
	s.Response = val
}

func (*LoginPostOKHeaders) loginPostRes() {}

type LoginPostOKSetCookie struct {
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *LoginPostOKSetCookie) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *LoginPostOKSetCookie) SetToken(val OptString) {
	s.Token = val
}

// LoginPostServiceUnavailable is response for LoginPost operation.
type LoginPostServiceUnavailable struct{}

func (*LoginPostServiceUnavailable) loginPostRes() {}

type LoginString string

// Ref: #/components/schemas/loginUserRequest
type LoginUserRequest struct {
	Login    LoginString    `json:"login"`
	Password PasswordString `json:"password"`
}

// GetLogin returns the value of Login.
func (s *LoginUserRequest) GetLogin() LoginString {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *LoginUserRequest) GetPassword() PasswordString {
	return s.Password
}

// SetLogin sets the value of Login.
func (s *LoginUserRequest) SetLogin(val LoginString) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *LoginUserRequest) SetPassword(val PasswordString) {
	s.Password = val
}

type NameString string

// NewOptBirthString returns new OptBirthString with value set to v.
func NewOptBirthString(v BirthString) OptBirthString {
	return OptBirthString{
		Value: v,
		Set:   true,
	}
}

// OptBirthString is optional BirthString.
type OptBirthString struct {
	Value BirthString
	Set   bool
}

// IsSet returns true if OptBirthString was set.
func (o OptBirthString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBirthString) Reset() {
	var v BirthString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBirthString) SetTo(v BirthString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBirthString) Get() (v BirthString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBirthString) Or(d BirthString) BirthString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateString returns new OptDateString with value set to v.
func NewOptDateString(v DateString) OptDateString {
	return OptDateString{
		Value: v,
		Set:   true,
	}
}

// OptDateString is optional DateString.
type OptDateString struct {
	Value DateString
	Set   bool
}

// IsSet returns true if OptDateString was set.
func (o OptDateString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateString) Reset() {
	var v DateString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateString) SetTo(v DateString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateString) Get() (v DateString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateString) Or(d DateString) DateString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmailString returns new OptEmailString with value set to v.
func NewOptEmailString(v EmailString) OptEmailString {
	return OptEmailString{
		Value: v,
		Set:   true,
	}
}

// OptEmailString is optional EmailString.
type OptEmailString struct {
	Value EmailString
	Set   bool
}

// IsSet returns true if OptEmailString was set.
func (o OptEmailString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmailString) Reset() {
	var v EmailString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmailString) SetTo(v EmailString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmailString) Get() (v EmailString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmailString) Or(d EmailString) EmailString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFriendAliasString returns new OptFriendAliasString with value set to v.
func NewOptFriendAliasString(v FriendAliasString) OptFriendAliasString {
	return OptFriendAliasString{
		Value: v,
		Set:   true,
	}
}

// OptFriendAliasString is optional FriendAliasString.
type OptFriendAliasString struct {
	Value FriendAliasString
	Set   bool
}

// IsSet returns true if OptFriendAliasString was set.
func (o OptFriendAliasString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFriendAliasString) Reset() {
	var v FriendAliasString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFriendAliasString) SetTo(v FriendAliasString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFriendAliasString) Get() (v FriendAliasString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFriendAliasString) Or(d FriendAliasString) FriendAliasString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFriendHiddenFlag returns new OptFriendHiddenFlag with value set to v.
func NewOptFriendHiddenFlag(v FriendHiddenFlag) OptFriendHiddenFlag {
	return OptFriendHiddenFlag{
		Value: v,
		Set:   true,
	}
}

// OptFriendHiddenFlag is optional FriendHiddenFlag.
type OptFriendHiddenFlag struct {
	Value FriendHiddenFlag
	Set   bool
}

// IsSet returns true if OptFriendHiddenFlag was set.
func (o OptFriendHiddenFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFriendHiddenFlag) Reset() {
	var v FriendHiddenFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFriendHiddenFlag) SetTo(v FriendHiddenFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFriendHiddenFlag) Get() (v FriendHiddenFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFriendHiddenFlag) Or(d FriendHiddenFlag) FriendHiddenFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFriendObject returns new OptFriendObject with value set to v.
func NewOptFriendObject(v FriendObject) OptFriendObject {
	return OptFriendObject{
		Value: v,
		Set:   true,
	}
}

// OptFriendObject is optional FriendObject.
type OptFriendObject struct {
	Value FriendObject
	Set   bool
}

// IsSet returns true if OptFriendObject was set.
func (o OptFriendObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFriendObject) Reset() {
	var v FriendObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFriendObject) SetTo(v FriendObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFriendObject) Get() (v FriendObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFriendObject) Or(d FriendObject) FriendObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFriendPairedFlag returns new OptFriendPairedFlag with value set to v.
func NewOptFriendPairedFlag(v FriendPairedFlag) OptFriendPairedFlag {
	return OptFriendPairedFlag{
		Value: v,
		Set:   true,
	}
}

// OptFriendPairedFlag is optional FriendPairedFlag.
type OptFriendPairedFlag struct {
	Value FriendPairedFlag
	Set   bool
}

// IsSet returns true if OptFriendPairedFlag was set.
func (o OptFriendPairedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFriendPairedFlag) Reset() {
	var v FriendPairedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFriendPairedFlag) SetTo(v FriendPairedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFriendPairedFlag) Get() (v FriendPairedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFriendPairedFlag) Or(d FriendPairedFlag) FriendPairedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFriendSubscribedFlag returns new OptFriendSubscribedFlag with value set to v.
func NewOptFriendSubscribedFlag(v FriendSubscribedFlag) OptFriendSubscribedFlag {
	return OptFriendSubscribedFlag{
		Value: v,
		Set:   true,
	}
}

// OptFriendSubscribedFlag is optional FriendSubscribedFlag.
type OptFriendSubscribedFlag struct {
	Value FriendSubscribedFlag
	Set   bool
}

// IsSet returns true if OptFriendSubscribedFlag was set.
func (o OptFriendSubscribedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFriendSubscribedFlag) Reset() {
	var v FriendSubscribedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFriendSubscribedFlag) SetTo(v FriendSubscribedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFriendSubscribedFlag) Get() (v FriendSubscribedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFriendSubscribedFlag) Or(d FriendSubscribedFlag) FriendSubscribedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkString returns new OptLinkString with value set to v.
func NewOptLinkString(v LinkString) OptLinkString {
	return OptLinkString{
		Value: v,
		Set:   true,
	}
}

// OptLinkString is optional LinkString.
type OptLinkString struct {
	Value LinkString
	Set   bool
}

// IsSet returns true if OptLinkString was set.
func (o OptLinkString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkString) Reset() {
	var v LinkString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkString) SetTo(v LinkString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkString) Get() (v LinkString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkString) Or(d LinkString) LinkString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginPostOKSetCookie returns new OptLoginPostOKSetCookie with value set to v.
func NewOptLoginPostOKSetCookie(v LoginPostOKSetCookie) OptLoginPostOKSetCookie {
	return OptLoginPostOKSetCookie{
		Value: v,
		Set:   true,
	}
}

// OptLoginPostOKSetCookie is optional LoginPostOKSetCookie.
type OptLoginPostOKSetCookie struct {
	Value LoginPostOKSetCookie
	Set   bool
}

// IsSet returns true if OptLoginPostOKSetCookie was set.
func (o OptLoginPostOKSetCookie) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginPostOKSetCookie) Reset() {
	var v LoginPostOKSetCookie
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginPostOKSetCookie) SetTo(v LoginPostOKSetCookie) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginPostOKSetCookie) Get() (v LoginPostOKSetCookie, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginPostOKSetCookie) Or(d LoginPostOKSetCookie) LoginPostOKSetCookie {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNameString returns new OptNameString with value set to v.
func NewOptNameString(v NameString) OptNameString {
	return OptNameString{
		Value: v,
		Set:   true,
	}
}

// OptNameString is optional NameString.
type OptNameString struct {
	Value NameString
	Set   bool
}

// IsSet returns true if OptNameString was set.
func (o OptNameString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNameString) Reset() {
	var v NameString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNameString) SetTo(v NameString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNameString) Get() (v NameString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNameString) Or(d NameString) NameString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRootFlag returns new OptRootFlag with value set to v.
func NewOptRootFlag(v RootFlag) OptRootFlag {
	return OptRootFlag{
		Value: v,
		Set:   true,
	}
}

// OptRootFlag is optional RootFlag.
type OptRootFlag struct {
	Value RootFlag
	Set   bool
}

// IsSet returns true if OptRootFlag was set.
func (o OptRootFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRootFlag) Reset() {
	var v RootFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRootFlag) SetTo(v RootFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRootFlag) Get() (v RootFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRootFlag) Or(d RootFlag) RootFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelephoneString returns new OptTelephoneString with value set to v.
func NewOptTelephoneString(v TelephoneString) OptTelephoneString {
	return OptTelephoneString{
		Value: v,
		Set:   true,
	}
}

// OptTelephoneString is optional TelephoneString.
type OptTelephoneString struct {
	Value TelephoneString
	Set   bool
}

// IsSet returns true if OptTelephoneString was set.
func (o OptTelephoneString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelephoneString) Reset() {
	var v TelephoneString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelephoneString) SetTo(v TelephoneString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelephoneString) Get() (v TelephoneString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelephoneString) Or(d TelephoneString) TelephoneString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PasswordString string

// Ref: #/components/schemas/profileInfo
type ProfileInfo struct {
	Login      LoginString        `json:"login"`
	Email      EmailString        `json:"email"`
	Root       RootFlag           `json:"root"`
	FirstName  OptNameString      `json:"firstName"`
	LastName   OptNameString      `json:"lastName"`
	ImageLink  OptLinkString      `json:"imageLink"`
	BirthDate  OptBirthString     `json:"birthDate"`
	Telephone  OptTelephoneString `json:"telephone"`
	RegDate    OptDateString      `json:"regDate"`
	LastModify OptDateString      `json:"lastModify"`
}

// GetLogin returns the value of Login.
func (s *ProfileInfo) GetLogin() LoginString {
	return s.Login
}

// GetEmail returns the value of Email.
func (s *ProfileInfo) GetEmail() EmailString {
	return s.Email
}

// GetRoot returns the value of Root.
func (s *ProfileInfo) GetRoot() RootFlag {
	return s.Root
}

// GetFirstName returns the value of FirstName.
func (s *ProfileInfo) GetFirstName() OptNameString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *ProfileInfo) GetLastName() OptNameString {
	return s.LastName
}

// GetImageLink returns the value of ImageLink.
func (s *ProfileInfo) GetImageLink() OptLinkString {
	return s.ImageLink
}

// GetBirthDate returns the value of BirthDate.
func (s *ProfileInfo) GetBirthDate() OptBirthString {
	return s.BirthDate
}

// GetTelephone returns the value of Telephone.
func (s *ProfileInfo) GetTelephone() OptTelephoneString {
	return s.Telephone
}

// GetRegDate returns the value of RegDate.
func (s *ProfileInfo) GetRegDate() OptDateString {
	return s.RegDate
}

// GetLastModify returns the value of LastModify.
func (s *ProfileInfo) GetLastModify() OptDateString {
	return s.LastModify
}

// SetLogin sets the value of Login.
func (s *ProfileInfo) SetLogin(val LoginString) {
	s.Login = val
}

// SetEmail sets the value of Email.
func (s *ProfileInfo) SetEmail(val EmailString) {
	s.Email = val
}

// SetRoot sets the value of Root.
func (s *ProfileInfo) SetRoot(val RootFlag) {
	s.Root = val
}

// SetFirstName sets the value of FirstName.
func (s *ProfileInfo) SetFirstName(val OptNameString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *ProfileInfo) SetLastName(val OptNameString) {
	s.LastName = val
}

// SetImageLink sets the value of ImageLink.
func (s *ProfileInfo) SetImageLink(val OptLinkString) {
	s.ImageLink = val
}

// SetBirthDate sets the value of BirthDate.
func (s *ProfileInfo) SetBirthDate(val OptBirthString) {
	s.BirthDate = val
}

// SetTelephone sets the value of Telephone.
func (s *ProfileInfo) SetTelephone(val OptTelephoneString) {
	s.Telephone = val
}

// SetRegDate sets the value of RegDate.
func (s *ProfileInfo) SetRegDate(val OptDateString) {
	s.RegDate = val
}

// SetLastModify sets the value of LastModify.
func (s *ProfileInfo) SetLastModify(val OptDateString) {
	s.LastModify = val
}

func (*ProfileInfo) profileUserIDGetRes()  {}
func (*ProfileInfo) profileUserIDPostRes() {}

// Ref: #/components/schemas/profileUpdate
type ProfileUpdate struct {
	Email     OptEmailString     `json:"email"`
	Root      OptRootFlag        `json:"root"`
	FirstName OptNameString      `json:"firstName"`
	LastName  OptNameString      `json:"lastName"`
	ImageLink OptLinkString      `json:"imageLink"`
	BirthDate OptBirthString     `json:"birthDate"`
	Telephone OptTelephoneString `json:"telephone"`
}

// GetEmail returns the value of Email.
func (s *ProfileUpdate) GetEmail() OptEmailString {
	return s.Email
}

// GetRoot returns the value of Root.
func (s *ProfileUpdate) GetRoot() OptRootFlag {
	return s.Root
}

// GetFirstName returns the value of FirstName.
func (s *ProfileUpdate) GetFirstName() OptNameString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *ProfileUpdate) GetLastName() OptNameString {
	return s.LastName
}

// GetImageLink returns the value of ImageLink.
func (s *ProfileUpdate) GetImageLink() OptLinkString {
	return s.ImageLink
}

// GetBirthDate returns the value of BirthDate.
func (s *ProfileUpdate) GetBirthDate() OptBirthString {
	return s.BirthDate
}

// GetTelephone returns the value of Telephone.
func (s *ProfileUpdate) GetTelephone() OptTelephoneString {
	return s.Telephone
}

// SetEmail sets the value of Email.
func (s *ProfileUpdate) SetEmail(val OptEmailString) {
	s.Email = val
}

// SetRoot sets the value of Root.
func (s *ProfileUpdate) SetRoot(val OptRootFlag) {
	s.Root = val
}

// SetFirstName sets the value of FirstName.
func (s *ProfileUpdate) SetFirstName(val OptNameString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *ProfileUpdate) SetLastName(val OptNameString) {
	s.LastName = val
}

// SetImageLink sets the value of ImageLink.
func (s *ProfileUpdate) SetImageLink(val OptLinkString) {
	s.ImageLink = val
}

// SetBirthDate sets the value of BirthDate.
func (s *ProfileUpdate) SetBirthDate(val OptBirthString) {
	s.BirthDate = val
}

// SetTelephone sets the value of Telephone.
func (s *ProfileUpdate) SetTelephone(val OptTelephoneString) {
	s.Telephone = val
}

// ProfileUserIDGetNotFound is response for ProfileUserIDGet operation.
type ProfileUserIDGetNotFound struct{}

func (*ProfileUserIDGetNotFound) profileUserIDGetRes() {}

// ProfileUserIDGetServiceUnavailable is response for ProfileUserIDGet operation.
type ProfileUserIDGetServiceUnavailable struct{}

func (*ProfileUserIDGetServiceUnavailable) profileUserIDGetRes() {}

// ProfileUserIDPostBadRequest is response for ProfileUserIDPost operation.
type ProfileUserIDPostBadRequest struct{}

func (*ProfileUserIDPostBadRequest) profileUserIDPostRes() {}

// ProfileUserIDPostForbidden is response for ProfileUserIDPost operation.
type ProfileUserIDPostForbidden struct{}

func (*ProfileUserIDPostForbidden) profileUserIDPostRes() {}

// ProfileUserIDPostNotFound is response for ProfileUserIDPost operation.
type ProfileUserIDPostNotFound struct{}

func (*ProfileUserIDPostNotFound) profileUserIDPostRes() {}

// ProfileUserIDPostServiceUnavailable is response for ProfileUserIDPost operation.
type ProfileUserIDPostServiceUnavailable struct{}

func (*ProfileUserIDPostServiceUnavailable) profileUserIDPostRes() {}

// ProfileUserIDPostUnauthorized is response for ProfileUserIDPost operation.
type ProfileUserIDPostUnauthorized struct{}

func (*ProfileUserIDPostUnauthorized) profileUserIDPostRes() {}

// A text message describing error.
// Ref: #/components/schemas/errorMessage
type RegisterPostBadRequest struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s RegisterPostBadRequest) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*RegisterPostBadRequest) registerPostRes() {}

// RegisterPostForbidden is response for RegisterPost operation.
type RegisterPostForbidden struct{}

func (*RegisterPostForbidden) registerPostRes() {}

// RegisterPostServiceUnavailable is response for RegisterPost operation.
type RegisterPostServiceUnavailable struct{}

func (*RegisterPostServiceUnavailable) registerPostRes() {}

type RootFlag bool

type TelephoneString string

type UserId uuid.UUID

func (*UserId) registerPostRes() {}
