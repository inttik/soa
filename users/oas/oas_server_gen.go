// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// FriendsUserIDGet implements GET /friends/{user_id} operation.
	//
	// Returns all public friends_id of user.
	// If client has private access to user_id (client is
	// root or is user_id), then friend aliasas are returned
	// as well as friend pairs metadata.
	//
	// GET /friends/{user_id}
	FriendsUserIDGet(ctx context.Context, params FriendsUserIDGetParams) (FriendsUserIDGetRes, error)
	// FriendsUserIDPost implements POST /friends/{user_id} operation.
	//
	// Add, update, or remove friend of user.
	//
	// POST /friends/{user_id}
	FriendsUserIDPost(ctx context.Context, req *FriendModify, params FriendsUserIDPostParams) (FriendsUserIDPostRes, error)
	// LoginPost implements POST /login operation.
	//
	// Checks that you is the user and, if so, returns JWT token.
	//
	// POST /login
	LoginPost(ctx context.Context, req *LoginUserRequest) (LoginPostRes, error)
	// ProfileUserIDGet implements GET /profile/{user_id} operation.
	//
	// Get all user profile information.
	//
	// GET /profile/{user_id}
	ProfileUserIDGet(ctx context.Context, params ProfileUserIDGetParams) (ProfileUserIDGetRes, error)
	// ProfileUserIDPost implements POST /profile/{user_id} operation.
	//
	// Check if user profile can be update by current user and, if so, updates it.
	//
	// POST /profile/{user_id}
	ProfileUserIDPost(ctx context.Context, req *ProfileUpdate, params ProfileUserIDPostParams) (ProfileUserIDPostRes, error)
	// RegisterPost implements POST /register operation.
	//
	// Checks if user can be created and, if so, creates it and returns user_id. Only root can create
	// root users.
	//
	// POST /register
	RegisterPost(ctx context.Context, req *CreateUserRequest) (RegisterPostRes, error)
	// NewError creates *ErrorMessageStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorMessageStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
