// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes LoginPostOKSetCookie as URI form.
func (s *LoginPostOKSetCookie) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("token", func(e uri.Encoder) error {
		if val, ok := s.Token.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"token\"")
	}
	return nil
}

var uriFieldsNameOfLoginPostOKSetCookie = [1]string{
	0: "token",
}

// DecodeURI decodes LoginPostOKSetCookie from URI form.
func (s *LoginPostOKSetCookie) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LoginPostOKSetCookie to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "token":
			if err := func() error {
				var sDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Token.SetTo(sDotTokenVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode LoginPostOKSetCookie")
	}

	return nil
}
